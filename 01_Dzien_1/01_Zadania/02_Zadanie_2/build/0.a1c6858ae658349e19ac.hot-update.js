self["webpackHotUpdatees6_async_await"](0,{

/***/ 23:
/***/ (() => {

/**
 * Przerób poniższe metody na funkcje strzałkowe
 */
function isArrayIncludeValue(value, array) {
  return array.includes(value);
}
var isArrayIncludeValue2 = function isArrayIncludeValue2(value, array) {
  return array.some(function (el) {
    return el === value;
  });
};
function sum(num1, num2) {
  return num1 + num2;
}
var sum2 = function sum2(num1, num2) {
  return num1 + num2;
};
var printArray = function printArray(array) {
  array.forEach(function (element) {
    console.log(element);
  });
};
var printArray2 = function printArray2(array) {
  return array.forEach(function (element) {
    return console.log(element);
  });
};
var filterNumbersFromArray = function filterNumbersFromArray(array) {
  return array.filter(function (el) {
    return typeof el === "number";
  });
};
var filterNumbersFromArray2 = function filterNumbersFromArray2(array) {
  return array.filter(function (el) {
    return typeof el === "number";
  });
};
var filterNumbersFromArray3 = function filterNumbersFromArray3(array) {
  return array.filter(Number);
};

/**
 * Wywołania
 * Nie zmieniaj kodu poniżej!
 */
console.log("--- isArrayIncludeValue ---");
var result1 = isArrayIncludeValue2(2, [1, 2, 3, 5, 3, 2, 5]);
console.log(result1);
console.log("\n--- sum ---");
var result2 = sum2(2, 3);
console.log(result2);
console.log("\n--- printArray ---");
printArray2(["Ala", "Zosia", "Ewa", "Piotr", "Darek"]);
console.log("\n--- filterNumbersFromArray ---");
var filteredArray = filterNumbersFromArray2(["Ala", 5, "Ewa", "Piotr", 2, "Adam", 19]);
console.log(filteredArray);

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("e248f4b7cd9b3b9f2d6c")
/******/ })();
/******/ 
/******/ }
);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDeEZMLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDUyxhQUFhLENBQUM7Ozs7Ozs7O1VDakQxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2VzNi1hc3luYy1hd2FpdC8uLzAxX0R6aWVuXzEvMDFfWmFkYW5pYS8wMl9aYWRhbmllXzIvanMvYXBwLmpzIiwid2VicGFjazovL2VzNi1hc3luYy1hd2FpdC93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQcnplcsOzYiBwb25pxbxzemUgbWV0b2R5IG5hIGZ1bmtjamUgc3RyemHFgmtvd2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUluY2x1ZGVWYWx1ZSh2YWx1ZSwgYXJyYXkpIHtcbiAgICByZXR1cm4gYXJyYXkuaW5jbHVkZXModmFsdWUpO1xufVxuXG5jb25zdCBpc0FycmF5SW5jbHVkZVZhbHVlMiA9ICh2YWx1ZSwgYXJyYXkpID0+IGFycmF5LnNvbWUoZWwgPT4gZWwgPT09IHZhbHVlKTtcblxuZnVuY3Rpb24gc3VtKG51bTEsIG51bTIpIHtcbiAgICByZXR1cm4gbnVtMSArIG51bTI7XG59XG5cbmNvbnN0IHN1bTIgPSAobnVtMSwgbnVtMikgPT4gbnVtMSArIG51bTI7XG5cbmxldCBwcmludEFycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBjb25zb2xlLmxvZyhlbGVtZW50KTtcbiAgICB9KTtcbn07XG5cbmNvbnN0IHByaW50QXJyYXkyID0gYXJyYXkgPT4gYXJyYXkuZm9yRWFjaChlbGVtZW50ID0+IGNvbnNvbGUubG9nKGVsZW1lbnQpKTtcblxubGV0IGZpbHRlck51bWJlcnNGcm9tQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICByZXR1cm4gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGVsID09PSBcIm51bWJlclwiO1xuICAgIH0pO1xufTtcblxuY29uc3QgZmlsdGVyTnVtYmVyc0Zyb21BcnJheTIgPSBhcnJheSA9PiBhcnJheS5maWx0ZXIoZWwgPT4gdHlwZW9mIGVsID09PSBcIm51bWJlclwiKTtcbmNvbnN0IGZpbHRlck51bWJlcnNGcm9tQXJyYXkzID0gYXJyYXkgPT4gYXJyYXkuZmlsdGVyKE51bWJlcik7XG5cbi8qKlxuICogV3l3b8WCYW5pYVxuICogTmllIHptaWVuaWFqIGtvZHUgcG9uacW8ZWohXG4gKi9cbmNvbnNvbGUubG9nKFwiLS0tIGlzQXJyYXlJbmNsdWRlVmFsdWUgLS0tXCIpO1xuY29uc3QgcmVzdWx0MSA9IGlzQXJyYXlJbmNsdWRlVmFsdWUyKDIsIFsxLCAyLCAzLCA1LCAzLCAyLCA1XSk7XG5jb25zb2xlLmxvZyhyZXN1bHQxKTtcblxuY29uc29sZS5sb2coXCJcXG4tLS0gc3VtIC0tLVwiKTtcbmNvbnN0IHJlc3VsdDIgPSBzdW0yKDIsIDMpO1xuY29uc29sZS5sb2cocmVzdWx0Mik7XG5cbmNvbnNvbGUubG9nKFwiXFxuLS0tIHByaW50QXJyYXkgLS0tXCIpO1xucHJpbnRBcnJheTIoW1wiQWxhXCIsIFwiWm9zaWFcIiwgXCJFd2FcIiwgXCJQaW90clwiLCBcIkRhcmVrXCJdKTtcblxuY29uc29sZS5sb2coXCJcXG4tLS0gZmlsdGVyTnVtYmVyc0Zyb21BcnJheSAtLS1cIik7XG5jb25zdCBmaWx0ZXJlZEFycmF5ID0gZmlsdGVyTnVtYmVyc0Zyb21BcnJheTIoW1wiQWxhXCIsIDUsIFwiRXdhXCIsIFwiUGlvdHJcIiwgMiwgXCJBZGFtXCIsIDE5XSk7XG5jb25zb2xlLmxvZyhmaWx0ZXJlZEFycmF5KTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCJlMjQ4ZjRiN2NkOWIzYjlmMmQ2Y1wiKSJdLCJuYW1lcyI6WyJpc0FycmF5SW5jbHVkZVZhbHVlIiwidmFsdWUiLCJhcnJheSIsImluY2x1ZGVzIiwiaXNBcnJheUluY2x1ZGVWYWx1ZTIiLCJzb21lIiwiZWwiLCJzdW0iLCJudW0xIiwibnVtMiIsInN1bTIiLCJwcmludEFycmF5IiwiZm9yRWFjaCIsImVsZW1lbnQiLCJjb25zb2xlIiwibG9nIiwicHJpbnRBcnJheTIiLCJmaWx0ZXJOdW1iZXJzRnJvbUFycmF5IiwiZmlsdGVyIiwiZmlsdGVyTnVtYmVyc0Zyb21BcnJheTIiLCJmaWx0ZXJOdW1iZXJzRnJvbUFycmF5MyIsIk51bWJlciIsInJlc3VsdDEiLCJyZXN1bHQyIiwiZmlsdGVyZWRBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=